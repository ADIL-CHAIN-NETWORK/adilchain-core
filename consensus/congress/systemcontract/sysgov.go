package systemcontract

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/core/vm"
	"github.com/ethereum/go-ethereum/log"
	"github.com/ethereum/go-ethereum/params"
	"math"
	"math/big"
)

var (
	//TODO: set these to formal addresses
	govAdmin        = common.HexToAddress("0x8Cc5A1a0802DB41DB826C2FcB72423744338DcB0")
	govAdminTestnet = common.HexToAddress("0x8Cc5A1a0802DB41DB826C2FcB72423744338DcB0")
)

const (
	govCode = "0x608060405234801561001057600080fd5b50600436106101215760003560e01c8063be645692116100ad578063e3377eb911610071578063e3377eb914610355578063efd8d8e2146103ea578063f851a440146103f2578063fb48270c146103fa578063fbb847e11461040257610121565b8063be645692146102b0578063c4d66de8146102ca578063c967f90f146102f0578063db78dd281461030f578063e08b1d381461033457610121565b806326782247116100f457806326782247146102555780633656de211461025d5780633a061bd31461027a5780634fb9e9b7146102825780636233be5d146102a857610121565b806305b8481014610126578063158ef93e146101f65780631b5e358c14610212578063232e5ffc14610236575b600080fd5b6101496004803603602081101561013c57600080fd5b503563ffffffff1661040a565b60405180878152602001868152602001856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156101b657818101518382015260200161019e565b50505050905090810190601f1680156101e35780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b6101fe6105a3565b604080519115158252519081900360200190f35b61021a6105ac565b604080516001600160a01b039092168252519081900360200190f35b6102536004803603602081101561024c57600080fd5b50356105b2565b005b61021a61078a565b6101496004803603602081101561027357600080fd5b5035610799565b61021a610805565b6102536004803603602081101561029857600080fd5b50356001600160a01b031661080b565b61021a6108a6565b6102b86108ac565b60408051918252519081900360200190f35b610253600480360360208110156102e057600080fd5b50356001600160a01b03166108b9565b6102f8610936565b6040805161ffff9092168252519081900360200190f35b61031761093b565b6040805167ffffffffffffffff9092168252519081900360200190f35b61033c610942565b6040805163ffffffff9092168252519081900360200190f35b610253600480360360a081101561036b57600080fd5b8135916001600160a01b03602082013581169260408301359091169160608101359181019060a0810160808201356401000000008111156103ab57600080fd5b8201836020820111156103bd57600080fd5b803590602001918460018302840111640100000000831117156103df57600080fd5b509092509050610948565b610317610cd8565b61021a610cde565b610253610cf2565b6102b8610dac565b600080600080600060606003805490508763ffffffff1610610468576040805162461bcd60e51b8152602060048201526012602482015271496e646578206f7574206f662072616e676560701b604482015290519081900360640190fd5b610470610db2565b60038863ffffffff168154811061048357fe5b60009182526020918290206040805160c08101825260069390930290910180548352600180820154848601526002808301546001600160a01b039081168686015260038401541660608601526004830154608086015260058301805485516101009482161594909402600019011691909104601f81018790048702830187019094528382529394919360a086019391929091908301828280156105675780601f1061053c57610100808354040283529160200191610567565b820191906000526020600020905b81548152906001019060200180831161054a57829003601f168201915b5050509190925250508151602083015160408401516060850151608086015160a090960151939e929d50909b5099509297509550909350505050565b60005460ff1681565b61f00181565b3341146105f3576040805162461bcd60e51b815260206004820152600a6024820152694d696e6572206f6e6c7960b01b604482015290519081900360640190fd5b60005b60035481101561078657816003828154811061060e57fe5b906000526020600020906006020160000154141561077e576003546000190181146106eb5760038054600019810190811061064557fe5b90600052602060002090600602016003828154811061066057fe5b6000918252602090912082546006909202019081556001808301548183015560028084015481840180546001600160a01b039283166001600160a01b031991821617909155600380870154908601805491909316911617905560048085015490840155600580850180546106e7949286019391926101009082161502600019011604610dfa565b5050505b60038054806106f657fe5b600082815260208120600660001990930192830201818155600181018290556002810180546001600160a01b03199081169091556003820180549091169055600481018290559061074a6005830182610e7f565b5050905560405182907fc2946e69de813a7cede502a3b315aa221abf9fcca5c7134b0ae6b2c3857cf63d90600090a2610786565b6001016105f6565b5050565b6001546001600160a01b031681565b6000806000806000606060028054905087106107f0576040805162461bcd60e51b8152602060048201526011602482015270125908191bd95cc81b9bdd08195e1a5cdd607a1b604482015290519081900360640190fd5b6107f8610db2565b6002888154811061048357fe5b61f00081565b60005461010090046001600160a01b0316331461085c576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517faefcaa6215f99fe8c2f605dd268ee4d23a5b596bbca026e25ce8446187f4f1ba90600090a250565b61f00281565b6801bc16d674ec80000081565b60005460ff1615610907576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b6000805460ff196001600160a01b0390931661010002610100600160a81b031990911617919091166001179055565b601581565b6201518081565b60035490565b60005461010090046001600160a01b03163314610999576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b6002546109a4610db2565b6040518060c00160405280838152602001898152602001886001600160a01b03168152602001876001600160a01b0316815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050600280546001810182559152825160069091027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81019182556020808501517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf83015560408501517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad0830180546001600160a01b039283166001600160a01b03199182161790915560608701517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad18501805491909316911617905560808501517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad283015560a085015180519596508695939450610b5b937f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad390930192910190610ec6565b505060038054600181018255600091909152825160069091027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b81019182556020808501517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c83015560408501517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d830180546001600160a01b039283166001600160a01b03199182161790915560608701517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85e8501805491909316911617905560808501517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85f83015560a08501518051869550610ca0937fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f86001929190910190610ec6565b50506040518391507f14ca27cd9911371c77ed1cf3cee0a4320613b07478668958754713b3c880cd0f90600090a25050505050505050565b61708081565b60005461010090046001600160a01b031681565b6001546001600160a01b03163314610d42576040805162461bcd60e51b815260206004820152600e60248201526d4e65772061646d696e206f6e6c7960901b604482015290519081900360640190fd5b60018054600080546001600160a01b03808416610100908102610100600160a81b0319909316929092178084556001600160a01b03199094169094556040519204909216917f7ce7ec0b50378fb6c0186ffb5f48325f6593fcb4ca4386f21861af3129188f5c91a2565b60025490565b6040518060c00160405280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610e335780548555610e6f565b82800160010185558215610e6f57600052602060002091601f016020900482015b82811115610e6f578254825591600101919060010190610e54565b50610e7b929150610f34565b5090565b50805460018160011615610100020316600290046000825580601f10610ea55750610ec3565b601f016020900490600052602060002090810190610ec39190610f34565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610f0757805160ff1916838001178555610e6f565b82800160010185558215610e6f579182015b82811115610e6f578251825591602001919060010190610f19565b5b80821115610e7b5760008155600101610f3556fea2646970667358221220994477e45cf92996794751d1c1cf74dea35860386fcc76a13cdd48b10334dce764736f6c634300060c0033"
)

type hardForkSysGov struct {
}

func (s *hardForkSysGov) GetName() string {
	return SysGovContractName
}

func (s *hardForkSysGov) Update(config *params.ChainConfig, height *big.Int, state *state.StateDB) (err error) {
	contractCode := common.FromHex(govCode)

	//write govCode to sys contract
	state.SetCode(SysGovContractAddr, contractCode)
	log.Debug("Write code to system contract account", "addr", SysGovContractAddr.String(), "code", govCode)

	return
}

func (s *hardForkSysGov) getAdminByChainId(chainId *big.Int) common.Address {
	if chainId.Cmp(params.MainnetChainConfig.ChainID) == 0 {
		return govAdmin
	}

	return govAdminTestnet
}

func (s *hardForkSysGov) Execute(state *state.StateDB, header *types.Header, chainContext core.ChainContext, config *params.ChainConfig) (err error) {

	method := "initialize"
	data, err := GetInteractiveABI()[SysGovContractName].Pack(method, s.getAdminByChainId(config.ChainID))
	if err != nil {
		log.Error("Can't pack data for initialize", "error", err)
		return err
	}

	msg := types.NewMessage(header.Coinbase, &SysGovContractAddr, 0, new(big.Int), math.MaxUint64, new(big.Int), data, false)

	context := core.NewEVMContext(msg, header, chainContext, nil)
	evm := vm.NewEVM(context, state, config, vm.Config{})

	_, _, err = evm.Call(vm.AccountRef(msg.From()), *msg.To(), msg.Data(), msg.Gas(), msg.Value())

	return
}
