package systemcontract

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/core/vm"
	"github.com/ethereum/go-ethereum/log"
	"github.com/ethereum/go-ethereum/params"
	"math"
	"math/big"
)

var (
	//TODO: set these to formal addresses
	devAdmin        = common.HexToAddress("0x000000000000000000000000000000000000FF00")
	devAdminTestnet = common.HexToAddress("0x000000000000000000000000000000000000FF00")
)

const (
	devCode = "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80634fb9e9b7116100715780634fb9e9b71461013d5780635eca4a70146101635780639e23c20914610189578063c4d66de8146101af578063f851a440146101d5578063fb48270c146101dd576100a9565b8063158ef93e146100ae57806322fbf1e8146100ca578063238dafe0146100f257806326782247146100fa578063397183281461011e575b600080fd5b6100b66101e5565b604080519115158252519081900360200190f35b6100f0600480360360208110156100e057600080fd5b50356001600160a01b03166101ee565b005b6100b661028c565b61010261029a565b604080516001600160a01b039092168252519081900360200190f35b6100f06004803603602081101561013457600080fd5b503515156102a9565b6100f06004803603602081101561015357600080fd5b50356001600160a01b031661038f565b6100b66004803603602081101561017957600080fd5b50356001600160a01b031661042b565b6100f06004803603602081101561019f57600080fd5b50356001600160a01b0316610449565b6100f0600480360360208110156101c557600080fd5b50356001600160a01b03166104e4565b610102610563565b6100f0610578565b60005460ff1681565b6000546201000090046001600160a01b03163314610240576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b6001600160a01b038116600081815260026020526040808220805460ff19166001179055517f058fdae480ed8e99b762bceb2d39835a68ee3a4789cd84e5c90cd59722ba02099190a250565b600054610100900460ff1681565b6001546001600160a01b031681565b6000546201000090046001600160a01b031633146102fb576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b60005460ff610100909104161515811515141561034c576040805162461bcd60e51b815260206004820152600a60248201526953616d652076616c756560b01b604482015290519081900360640190fd5b6000805461ff00191661010083151590810291909117825560405190917f733a7f99819dc7466bff56e7c0b6753b43b750a692f2a5bb4fe373815a0c784591a250565b6000546201000090046001600160a01b031633146103e1576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517faefcaa6215f99fe8c2f605dd268ee4d23a5b596bbca026e25ce8446187f4f1ba90600090a250565b6001600160a01b031660009081526002602052604090205460ff1690565b6000546201000090046001600160a01b0316331461049b576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b6001600160a01b038116600081815260026020526040808220805460ff19169055517f110a48e3e347ae018d4d40446e4e917b416f912dec489da19b4507bb9bb18cd49190a250565b60005460ff1615610532576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b6000805460ff196001600160a01b03909316620100000262010000600160b01b031990911617919091166001179055565b6000546201000090046001600160a01b031681565b6001546001600160a01b031633146105c8576040805162461bcd60e51b815260206004820152600e60248201526d4e65772061646d696e206f6e6c7960901b604482015290519081900360640190fd5b600180546000805462010000600160b01b0319166001600160a01b0380841662010000908102929092178084556001600160a01b03199094169094556040519204909216917f7ce7ec0b50378fb6c0186ffb5f48325f6593fcb4ca4386f21861af3129188f5c91a256fea2646970667358221220cce3d4d7b8d972b48991b781c239e7fe426adf91090d9888156a1e4a146b167264736f6c634300060c0033"
)

type hardForkDevelopers struct {
}

func (s *hardForkDevelopers) GetName() string {
	return DevelopersContractName
}

func (s *hardForkDevelopers) Update(config *params.ChainConfig, height *big.Int, state *state.StateDB) (err error) {
	contractCode := common.FromHex(devCode)

	//write devCode to sys contract
	state.SetCode(DevelopersContractAddr, contractCode)
	log.Debug("Write code to system contract account", "addr", DevelopersContractAddr.String(), "code", devCode)

	return
}

func (s *hardForkDevelopers) getAdminByChainId(chainId *big.Int) common.Address {
	if chainId.Cmp(params.MainnetChainConfig.ChainID) == 0 {
		return devAdmin
	}

	return devAdminTestnet
}

func (s *hardForkDevelopers) Execute(state *state.StateDB, header *types.Header, chainContext core.ChainContext, config *params.ChainConfig) (err error) {

	method := "initialize"
	data, err := GetInteractiveABI()[DevelopersContractName].Pack(method, s.getAdminByChainId(config.ChainID))
	if err != nil {
		log.Error("Can't pack data for initialize", "error", err)
		return err
	}

	msg := types.NewMessage(header.Coinbase, &DevelopersContractAddr, 0, new(big.Int), math.MaxUint64, new(big.Int), data, false)

	context := core.NewEVMContext(msg, header, chainContext, nil)
	evm := vm.NewEVM(context, state, config, vm.Config{})

	_, _, err = evm.Call(vm.AccountRef(msg.From()), *msg.To(), msg.Data(), msg.Gas(), msg.Value())

	return
}
