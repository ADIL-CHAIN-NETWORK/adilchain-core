package systemcontract

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/core/vm"
	"github.com/ethereum/go-ethereum/log"
	"github.com/ethereum/go-ethereum/params"
	"math"
	"math/big"
)

var (
	//TODO: set these to formal addresses
	devAdmin        = common.HexToAddress("0x000000000000000000000000000000000000FF00")
	devAdminTestnet = common.HexToAddress("0x000000000000000000000000000000000000FF00")
)

const (
	devCode = "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80635eca4a70116100665780635eca4a70146101265780639e23c2091461014c578063c4d66de814610172578063f851a44014610198578063fb48270c146101a057610093565b8063158ef93e1461009857806322fbf1e8146100b457806326782247146100dc5780634fb9e9b714610100575b600080fd5b6100a06101a8565b604080519115158252519081900360200190f35b6100da600480360360208110156100ca57600080fd5b50356001600160a01b03166101b1565b005b6100e461024e565b604080516001600160a01b039092168252519081900360200190f35b6100da6004803603602081101561011657600080fd5b50356001600160a01b031661025d565b6100a06004803603602081101561013c57600080fd5b50356001600160a01b03166102f8565b6100da6004803603602081101561016257600080fd5b50356001600160a01b0316610316565b6100da6004803603602081101561018857600080fd5b50356001600160a01b03166103b0565b6100e461042d565b6100da610441565b60005460ff1681565b60005461010090046001600160a01b03163314610202576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b6001600160a01b038116600081815260026020526040808220805460ff19166001179055517f058fdae480ed8e99b762bceb2d39835a68ee3a4789cd84e5c90cd59722ba02099190a250565b6001546001600160a01b031681565b60005461010090046001600160a01b031633146102ae576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517faefcaa6215f99fe8c2f605dd268ee4d23a5b596bbca026e25ce8446187f4f1ba90600090a250565b6001600160a01b031660009081526002602052604090205460ff1690565b60005461010090046001600160a01b03163314610367576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b6001600160a01b038116600081815260026020526040808220805460ff19169055517f110a48e3e347ae018d4d40446e4e917b416f912dec489da19b4507bb9bb18cd49190a250565b60005460ff16156103fe576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b6000805460ff196001600160a01b0390931661010002610100600160a81b031990911617919091166001179055565b60005461010090046001600160a01b031681565b6001546001600160a01b03163314610491576040805162461bcd60e51b815260206004820152600e60248201526d4e65772061646d696e206f6e6c7960901b604482015290519081900360640190fd5b60018054600080546001600160a01b03808416610100908102610100600160a81b0319909316929092178084556001600160a01b03199094169094556040519204909216917f7ce7ec0b50378fb6c0186ffb5f48325f6593fcb4ca4386f21861af3129188f5c91a256fea2646970667358221220ea26f81a29cda70ec43b75ceee80c7b453e64f032575d097ae7b2d8cf0fcb74864736f6c634300060c0033"
)

type hardForkDevelopers struct {
}

func (s *hardForkDevelopers) GetName() string {
	return DevelopersContractName
}

func (s *hardForkDevelopers) Update(config *params.ChainConfig, height *big.Int, state *state.StateDB) (err error) {
	contractCode := common.FromHex(devCode)

	//write govCode to sys contract
	state.SetCode(SysGovContractAddr, contractCode)
	log.Debug("Write code to system contract account", "addr", DevelopersContractAddr.String(), "code", devCode)

	return
}

func (s *hardForkDevelopers) getAdminByChainId(chainId *big.Int) common.Address {
	if chainId.Cmp(params.MainnetChainConfig.ChainID) == 0 {
		return devAdmin
	}

	return devAdminTestnet
}

func (s *hardForkDevelopers) Execute(state *state.StateDB, header *types.Header, chainContext core.ChainContext, config *params.ChainConfig) (err error) {

	method := "initialize"
	data, err := GetInteractiveABI()[DevelopersContractName].Pack(method, s.getAdminByChainId(config.ChainID))
	if err != nil {
		log.Error("Can't pack data for initialize", "error", err)
		return err
	}

	msg := types.NewMessage(header.Coinbase, &DevelopersContractAddr, 0, new(big.Int), math.MaxUint64, new(big.Int), data, false)

	context := core.NewEVMContext(msg, header, chainContext, nil)
	evm := vm.NewEVM(context, state, config, vm.Config{})

	_, _, err = evm.Call(vm.AccountRef(msg.From()), *msg.To(), msg.Data(), msg.Gas(), msg.Value())

	return
}
