package systemcontract

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/core/vm"
	"github.com/ethereum/go-ethereum/log"
	"github.com/ethereum/go-ethereum/params"
	"math"
	"math/big"
)

var (
	//TODO: set these to formal addresses
	devAdmin        = common.HexToAddress("0x8Cc5A1a0802DB41DB826C2FcB72423744338DcB0")
	devAdminTestnet = common.HexToAddress("0x8Cc5A1a0802DB41DB826C2FcB72423744338DcB0")
)

const (
	addressListCode = "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80634fb9e9b7116100a25780639e23c209116100715780639e23c209146102b8578063c4d66de8146102de578063db6619b014610304578063f851a4401461030c578063fb48270c146103145761010b565b80634fb9e9b7146102355780635eca4a701461025b5780636dfb51761461028157806370b03fc5146102b05761010b565b8063327564b6116100de578063327564b6146101d0578063349cb711146101d857806339a368381461020757806343e0c73a1461022d5761010b565b8063158ef93e1461011057806318c662121461012c57806322fbf1e81461018457806326782247146101ac575b600080fd5b61011861031c565b604080519115158252519081900360200190f35b610134610325565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610170578181015183820152602001610158565b505050509050019250505060405180910390f35b6101aa6004803603602081101561019a57600080fd5b50356001600160a01b0316610387565b005b6101b4610425565b604080516001600160a01b039092168252519081900360200190f35b610118610434565b6101aa600480360360408110156101ee57600080fd5b5080356001600160a01b0316906020013560ff16610442565b6101aa6004803603604081101561021d57600080fd5b508035906020013560ff1661050d565b6101aa6105d6565b6101aa6004803603602081101561024b57600080fd5b50356001600160a01b03166106ac565b6101186004803603602081101561027157600080fd5b50356001600160a01b0316610748565b6101aa6004803603604081101561029757600080fd5b5080356001600160a01b0316906020013560ff16610766565b610134610954565b6101aa600480360360208110156102ce57600080fd5b50356001600160a01b03166109b4565b6101aa600480360360208110156102f457600080fd5b50356001600160a01b0316610a4f565b6101aa610ace565b6101b4610ba9565b6101aa610bbe565b60005460ff1681565b6060600380548060200260200160405190810160405280929190818152602001828054801561037d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161035f575b5050505050905090565b6000546201000090046001600160a01b031633146103d9576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b6001600160a01b038116600081815260026020526040808220805460ff19166001179055517f058fdae480ed8e99b762bceb2d39835a68ee3a4789cd84e5c90cd59722ba02099190a250565b6001546001600160a01b031681565b600054610100900460ff1681565b6000546201000090046001600160a01b03163314610494576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b60028160028111156104a257fe5b14806104b9575060008160028111156104b757fe5b145b156104dd576104cb6003836000610c78565b6104d86004836001610c78565b610509565b60008160028111156104eb57fe5b14156104fd576104d860038383610c78565b61050960048383610c78565b5050565b6000546201000090046001600160a01b0316331461055f576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b600281600281111561056d57fe5b14156105aa5760405162461bcd60e51b8152600401808060200182810382526029815260200180610f246029913960400191505060405180910390fd5b60008160028111156105b857fe5b14156105ca576104d860038383610dba565b61050960048383610dba565b6000546201000090046001600160a01b03163314610628576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b600054610100900460ff16610677576040805162461bcd60e51b815260206004820152601060248201526f185b1c9958591e48191a5cd8589b195960821b604482015290519081900360640190fd5b6000805461ff00191681556040517f733a7f99819dc7466bff56e7c0b6753b43b750a692f2a5bb4fe373815a0c7845908290a2565b6000546201000090046001600160a01b031633146106fe576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517faefcaa6215f99fe8c2f605dd268ee4d23a5b596bbca026e25ce8446187f4f1ba90600090a250565b6001600160a01b031660009081526002602052604090205460ff1690565b6000546201000090046001600160a01b031633146107b8576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b60028160028111156107c657fe5b1415610854576003805460018181019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0385166001600160a01b031991821681179092556004805493840181556000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9092018054909216179055610904565b600081600281111561086257fe5b14156108b857600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b038416179055610904565b600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0384161790555b816001600160a01b03167f4bb8845da5ed7c2df200814ba7a0f3db11326cc817cf9a042fa54d4e5f6f29bb826040518082600281111561094057fe5b815260200191505060405180910390a25050565b6060600480548060200260200160405190810160405280929190818152602001828054801561037d576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161035f575050505050905090565b6000546201000090046001600160a01b03163314610a06576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b6001600160a01b038116600081815260026020526040808220805460ff19169055517f110a48e3e347ae018d4d40446e4e917b416f912dec489da19b4507bb9bb18cd49190a250565b60005460ff1615610a9d576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b6000805460ff196001600160a01b03909316620100000262010000600160b01b031990911617919091166001179055565b6000546201000090046001600160a01b03163314610b20576040805162461bcd60e51b815260206004820152600a60248201526941646d696e206f6e6c7960b01b604482015290519081900360640190fd5b600054610100900460ff1615610b6f576040805162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e48195b98589b1959608a1b604482015290519081900360640190fd5b6000805461ff0019166101001781556040516001917f733a7f99819dc7466bff56e7c0b6753b43b750a692f2a5bb4fe373815a0c784591a2565b6000546201000090046001600160a01b031681565b6001546001600160a01b03163314610c0e576040805162461bcd60e51b815260206004820152600e60248201526d4e65772061646d696e206f6e6c7960901b604482015290519081900360640190fd5b600180546000805462010000600160b01b0319166001600160a01b0380841662010000908102929092178084556001600160a01b03199094169094556040519204909216917f7ce7ec0b50378fb6c0186ffb5f48325f6593fcb4ca4386f21861af3129188f5c91a2565b60005b8354811015610db457826001600160a01b0316848281548110610c9a57fe5b6000918252602090912001546001600160a01b03161415610dac578354600019018114610d2c57835484906000198101908110610cd357fe5b9060005260206000200160009054906101000a90046001600160a01b0316848281548110610cfd57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b83805480610d3657fe5b600082815260209020810160001990810180546001600160a01b03191690550190556040516001600160a01b038416907f91b762fba034b39c8b14c1e6463a15b1f4c211dcd0023f7fa2f4ae2928dfc44d90849080826002811115610d9757fe5b815260200191505060405180910390a2610db4565b600101610c7b565b50505050565b82548210610e04576040805162461bcd60e51b81526020600482015260126024820152711a5b99195e081bdd5d081bd988189bdd5b9960721b604482015290519081900360640190fd5b6000838381548110610e1257fe5b60009182526020909120015484546001600160a01b039091169150600019018314610ea257835484906000198101908110610e4957fe5b9060005260206000200160009054906101000a90046001600160a01b0316848481548110610e7357fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b83805480610eac57fe5b600082815260209020810160001990810180546001600160a01b03191690550190556040516001600160a01b038216907f91b762fba034b39c8b14c1e6463a15b1f4c211dcd0023f7fa2f4ae2928dfc44d90849080826002811115610f0d57fe5b815260200191505060405180910390a25050505056fe63616e206e6f7420626520426f7468206f6e2072656d6f7665426c61636b6c6973744174496e646578a2646970667358221220c78798c5eec7910fb895563d9c75eccd811ac9b9b4c863bda21bc6dbdaf300c664736f6c634300060c0033"
)

type hardForkAddressList struct {
}

func (s *hardForkAddressList) GetName() string {
	return AddressListContractName
}

func (s *hardForkAddressList) Update(config *params.ChainConfig, height *big.Int, state *state.StateDB) (err error) {
	contractCode := common.FromHex(addressListCode)

	//write addressListCode to sys contract
	state.SetCode(AddressListContractAddr, contractCode)
	log.Debug("Write code to system contract account", "addr", AddressListContractAddr.String(), "code", addressListCode)

	return
}

func (s *hardForkAddressList) getAdminByChainId(chainId *big.Int) common.Address {
	if chainId.Cmp(params.MainnetChainConfig.ChainID) == 0 {
		return devAdmin
	}

	return devAdminTestnet
}

func (s *hardForkAddressList) Execute(state *state.StateDB, header *types.Header, chainContext core.ChainContext, config *params.ChainConfig) (err error) {

	method := "initialize"
	data, err := GetInteractiveABI()[AddressListContractName].Pack(method, s.getAdminByChainId(config.ChainID))
	if err != nil {
		log.Error("Can't pack data for initialize", "error", err)
		return err
	}

	msg := types.NewMessage(header.Coinbase, &AddressListContractAddr, 0, new(big.Int), math.MaxUint64, new(big.Int), data, false)

	context := core.NewEVMContext(msg, header, chainContext, nil)
	evm := vm.NewEVM(context, state, config, vm.Config{})

	_, _, err = evm.Call(vm.AccountRef(msg.From()), *msg.To(), msg.Data(), msg.Gas(), msg.Value())

	return
}
